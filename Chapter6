# Loops for banana!

fruit = 'banana'
index = 0
while index < len(fruit) :
    letter = fruit[index]
    print(index, letter)
    index = index + 1

# ******************************************************************************************************

# More loops for banana with for!

fruit = 'banana'
for letter in fruit :
    print(letter)
    
 
# ******************************************************************************************************

# Count the number of times 'a' appear

word = 'banana'
count = 0
for letter in word :
    if letter == 'a' :
        count = count + 1
print(count)

# ******************************************************************************************************




# ******************************************************************************************************

# Exercise 1: Write a while loop that starts at the last character in the string and works its way backwards 
# to the first character in the string, printing each letter on a separate line, except backwards.

word = 'banana'
count = len(word) - 1
while count >= 0 :
    print(word[count])
    count = count - 1

# If want to use for:

word = 'banana'
for letter in word[::-1] :
    print(letter)

# ******************************************************************************************************

# Exercise 3: Encapsulate this code in a function named count, and generalize it so
# that it accepts the string and the letter as arguments.

# word = 'banana'
# count = 0
# for letter in word:
#   if letter == 'a':
#       count = count + 1
# print(count)

def count(word, letter) :
    count = 0
    for character in word :
        if character == letter:
            count = count + 1
    return count

print(count('pineapple', 'p'))

# ******************************************************************************************************

# Exercise 4: There is a string method called count that is similar to the function in
# the previous exercise. Read the documentation of this method at:
# https://docs.python.org/library/stdtypes.html#string-methods
# Write an invocation that counts the number of times the letter a occurs in “banana”.

word = 'banana'
print(word.count('a'))

# ******************************************************************************************************




# ******************************************************************************************************
# Example of string methods!

>>>word = 'Se você acha que Fire Emblem deveria ter menos personagem, que jogue Final Fantasy ß!'

>>>print(word.capitalize())
Se você acha que fire emblem deveria ter menos personagem, que jogue final fantasy ß!

>>>print(word.casefold())
se você acha que fire emblem deveria ter menos personagem, que jogue final fantasy ss!
# For example, the German lowercase letter 'ß' is equivalent to "ss". Since it is already lowercase, 
# lower() would do nothing to 'ß'; casefold() converts it to "ss".

>>>print(word.center(200,'-'))
---------------------------------------------------------Se você acha que Fire Emblem deveria ter menos personagem, que jogue Final Fantasy ß!----------------------------------------------------------

>>>print(word.count('Fi')
2

>>>print(word.encode(encoding="utf-8", errors="strict"))
b'Se voc\xc3\xaa acha que Fire Emblem deveria ter menos personagem, que jogue Final Fantasy \xc3\x9f!'



# ******************************************************************************************************
# Importing string library! >>>import string

>>>print(string.ascii_letters)
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
# All letters used in English!

>>>print(string.ascii_lowercase)
abcdefghijklmnopqrstuvwxyz

>>>print(string.ascii_uppercase)
ABCDEFGHIJKLMNOPQRSTUVWXYZ

>>>print(string.digits)
0123456789

>>>print(string.hexdigits)
0123456789abcdefABCDEF

>>>print(string.octdigits)
01234567

>>>print(string.punctuation)
!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~

>>>print(string.printable)
0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~ 	



# EVERYTHING!!!!!

>>>print(string.whitespace)
 	



# Yes, a looooooooot of whitespaces!
# From documentation of Python - A string containing all ASCII characters that are considered whitespace. 
# This includes the characters space, tab, linefeed, return, formfeed, and vertical tab.



