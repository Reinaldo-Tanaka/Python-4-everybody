#  Criando uma tabela para base de dados

import sqlite3

conn = sqlite3.connect('music.sqlite')
cur = conn.cursor()

cur.execute('DROP TABLE IF EXISTS Tracks')
cur.execute('CREATE TABLE Tracks (title TEXT, plays INTEGER)')

conn.close()

# Aqui se cria uma tabela cujo arquivo será "music.sqlite" e terá "title" e "plays" como colunas
# que neste contexto chamam-se "attributes". "title" terá seus dados como texto, "plays" terá
# inteiros.

# ************************************************************************************************
# *** From teacher: Criando uma tabela e inserindo dados ***

import sqlite3

conn = sqlite3.connect('music.sqlite')
cur = conn.cursor()

cur.execute('INSERT INTO Tracks (title, plays) VALUES (?, ?)', 
    ('Thunderstruck', 20))
cur.execute('INSERT INTO Tracks (title, plays) VALUES (?, ?)', 
    ('My Way', 15))
conn.commit()

print('Tracks:')
cur.execute('SELECT title, plays FROM Tracks')
for row in cur:
     print(row)

cur.execute('DELETE FROM Tracks WHERE plays < 100')
conn.commit()

cur.close()

# Neste caso já foi criado a tabela "Tracks" anteriormente e agora apenas inserimos os valores
# Neste exemplo, os comandos mais abaixo retiram do arquivo os dados postos. 
# E perceba o "commit()": função pra fixar os dados!

# ************************************************************************************************
# *** From Reinaldinho: Criando uma tabela e inserindo dados ***

import sqlite3

conn = sqlite3.connect('fe.sqlite')
cur = conn.cursor()

cur.execute('DROP TABLE IF EXISTS Main_chars')
cur.execute('CREATE TABLE Main_chars (Title TEXT, Name TEXT, Weapon BOOLEAN)')
cur.execute('INSERT INTO Main_chars (Title, Name, Weapon) VALUES (?, ?, ?)',
    ('暗黒竜と光の剣', 'Marth', True))
cur.execute('INSERT INTO Main_chars (Title, Name, Weapon) VALUES (?, ?, ?)',
    ('聖戦の系譜', 'Sigurd', False))
conn.commit()

print('Main_chars:')
cur.execute('SELECT Title, Name, Weapon FROM Main_chars')
for row in cur:
     print(row)

cur.close()

# Neste caso particular, agrego os dois códigos dados pelo professor e crio minha tabela com 
# os dados de FE1 e FE4 - interessante notar que os valores BOOLEAN são 0 e 1 pra False e True!
# *** Nota pra mim mesmo: não faço ideia o que seja o ? nos VALUES!

# ************************************************************************************************
# *** From teacher: emails ***

import sqlite3

conn = sqlite3.connect('emaildb.sqlite')
cur = conn.cursor()

cur.execute('DROP TABLE IF EXISTS Counts')

cur.execute('''
CREATE TABLE Counts (email TEXT, count INTEGER)''')

fname = input('Enter file name: ')
if (len(fname) < 1): fname = 'mbox-short.txt'
fh = open(fname)
for line in fh:
    if not line.startswith('From: '): continue
    pieces = line.split()
    email = pieces[1]
    cur.execute('SELECT count FROM Counts WHERE email = ? ', (email,))
    row = cur.fetchone()
    if row is None:
        cur.execute('''INSERT INTO Counts (email, count)
                VALUES (?, 1)''', (email,))
    else:
        cur.execute('UPDATE Counts SET count = count + 1 WHERE email = ?',
                    (email,))
    conn.commit()

# https://www.sqlite.org/lang_select.html
sqlstr = 'SELECT email, count FROM Counts ORDER BY count DESC LIMIT 10'

for row in cur.execute(sqlstr):
    print(str(row[0]), row[1])

cur.close()
# ************************************************************************************************
# From euzinho: pegando dias da semana!

import sqlite3

conn = sqlite3.connect('emaildb.sqlite')
cur = conn.cursor()

cur.execute('DROP TABLE IF EXISTS Counts')

cur.execute('''
CREATE TABLE Counts (day TEXT, count INTEGER)''')

fname = input('Enter file name: ')
if (len(fname) < 1): fname = 'mbox-short.txt'
fh = open(fname)
for line in fh:
    if not line.startswith('From '): continue
    pieces = line.split()
    if len(pieces) < 3 : continue
    day = pieces[2]
    cur.execute('SELECT count FROM Counts WHERE day = ? ', (day,))
    row = cur.fetchone()
    if row is None:
        cur.execute('''INSERT INTO Counts (day, count)
                VALUES (?, 1)''', (day,))
    else:
        cur.execute('UPDATE Counts SET count = count + 1 WHERE day = ?',
                    (day,))

    conn.commit()

# https://www.sqlite.org/lang_select.html
sqlstr = 'SELECT day, count FROM Counts ORDER BY count DESC LIMIT 10'

for row in cur.execute(sqlstr):
    print(str(row[0]), row[1])

cur.close()


# ************************************************************************************************
# *** From teacher - usando Twitter ***


from urllib.request import urlopen
import urllib.error
import twurl
import json
import sqlite3
import ssl

TWITTER_URL = 'https://api.twitter.com/1.1/friends/list.json'

conn = sqlite3.connect('spider.sqlite')
cur = conn.cursor()

cur.execute('''
            CREATE TABLE IF NOT EXISTS Twitter
            (name TEXT, retrieved INTEGER, friends INTEGER)''')

# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

while True:
    acct = input('Enter a Twitter account, or quit: ')
    if (acct == 'quit'): break
    if (len(acct) < 1):
        cur.execute('SELECT name FROM Twitter WHERE retrieved = 0 LIMIT 1')
        try:
            acct = cur.fetchone()[0]
        except:
            print('No unretrieved Twitter accounts found')
            continue

    url = twurl.augment(TWITTER_URL, {'screen_name': acct, 'count': '20'})
    print('Retrieving', url)
    connection = urlopen(url, context=ctx)
    data = connection.read().decode()
    headers = dict(connection.getheaders())

    print('Remaining', headers['x-rate-limit-remaining'])
    js = json.loads(data)
    # Debugging
    # print json.dumps(js, indent=4)

    cur.execute('UPDATE Twitter SET retrieved=1 WHERE name = ?', (acct, ))

    countnew = 0
    countold = 0
    for u in js['users']:
        friend = u['screen_name']
        print(friend)
        cur.execute('SELECT friends FROM Twitter WHERE name = ? LIMIT 1',
                    (friend, ))
        try:
            count = cur.fetchone()[0]
            cur.execute('UPDATE Twitter SET friends = ? WHERE name = ?',
                        (count+1, friend))
            countold = countold + 1
        except:
            cur.execute('''INSERT INTO Twitter (name, retrieved, friends)
                        VALUES (?, 0, 1)''', (friend, ))
            countnew = countnew + 1
    print('New accounts=', countnew, ' revisited=', countold)
    conn.commit()

cur.close()
# ************************************************************************************************
# ************************************************************************************************
# ************************************************************************************************
# ************************************************************************************************
# ************************************************************************************************
# ************************************************************************************************
# ************************************************************************************************
# ************************************************************************************************
