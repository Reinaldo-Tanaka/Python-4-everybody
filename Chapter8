# Strings, files, lists and Guardian Pattern

arquivo = open('mbox-short.txt')

for linha in arquivo :
    linha = linha.strip()
    # if linha == '' : continue --> Guardian
    palavras = linha.split()
    # Guardian
    if len(palavras) < 1 : continue # Podemos deixar mais robusto com len(palavras) < 3
    if palavras[0] != 'From' : continue
    print(palavras[2])

# No Guardian Pattern podemos deixar mais bonito ainda:
# if len(palavras) < 3 or palavras[0] != 'From' :

# *********************************************************************************************************

# Exercise 2: Figure out which line of the above program is still not properly guarded. See if you can 
# construct a text file which causes the program to fail and then modify the program so that the line 
# is properly guarded and test it to make sure it handles your new text file.

fhand = open('mbox-short.txt')
count = 0
for line in fhand:
    words = line.split()
    # Guardian pattern
    if len(words) < 3 : continue # Instead of len(words) == 0, because there are some lines that has one or two parameters
    if words[0] != 'From' : continue
    print(words[2])

# *********************************************************************************************************

# Exercise 3: Rewrite the guardian code in the above example without two if statements. Instead, use a 
# compound logical expression using the or logical operator with a single if statement.

fhand = open('mbox-short.txt')
count = 0
for line in fhand:
    words = line.split()
    # Guardian pattern
    if len(words) < 3 or words[0] != 'From' : continue
    print(words[2])
    
# *********************************************************************************************************

# Exercise 4: Find all unique words in a file Shakespeare used over 20,000 words in his works. 
# But how would you determine that? How would you produce the list of all the words that
# Shakespeare used? Would you download all his work, read it and track all unique words by hand?
# Let’s use Python to achieve that instead. List all unique words, sorted in alphabetical order, 
# that are stored in a file romeo.txt containing a subset of Shakespeare’s work.
# To get started, download a copy of the file www.py4e.com/code3/romeo.txt.
# Create a list of unique words, which will contain the final result. Write a program to open the 
# file romeo.txt and read it line by line. For each line, split the line into a list of words using 
# the split function. For each word, check to see if the word is already in the list of unique
# words. If the word is not in the list of unique words, add it to the list.
# When the program completes, sort and print the list of unique words in alphabetical order.

total_palavras = list()
palavras_unicas = list()
arquivo = open('romeo.txt')
for linha in arquivo :
    linha.strip()
    lista_palavras = linha.split()
    total_palavras = total_palavras + lista_palavras

palavras_unicas.append(total_palavras[0]) # At least one item on the list!
for palavra in total_palavras :
    palavra = palavra.lower()
    ja_tem = 0
    for unico in palavras_unicas :
        if unico == palavra :
            ja_tem = ja_tem + 1
    if ja_tem == 0 :
        palavras_unicas.append(palavra)

palavras_unicas.sort()
print(palavras_unicas)

# *********************************************************************************************************

# Exercise 5: Minimalist Email Client.
# MBOX (mail box) is a popular file format to store and share a collection of emails. This was used by 
# early email servers and desktop apps. Without getting into too many details, MBOX is a text file, 
# which stores emails consecutively. Emails are separated by a special line which starts with 
# From (notice the space). Importantly, lines starting with
# From: (notice the colon) describes the email itself and does not act as a separator. Imagine you 
# wrote a minimalist email app, that lists the email of the senders in the user’s Inbox and counts 
# the number of emails.
# Write a program to read through the mail box data and when you find line that starts with “From”, 
# you will split the line into words using the split function. We are interested in who sent the 
# message, which is the second word on the From line.
# You will parse the From line and print out the second word for each From line, then you will also 
# count the number of From (not From:) lines and print out a count at the end. This is a good sample output
# with a few lines removed:

arquivo = input('Por favor, qual o nome do arquivo? ')

try :
    lido = open(arquivo)
except :
    print('Arquivo não encontrado')
    quit()

contagem = 0
for linha in lido :
    linha.strip()
    palavras = linha.split()
    # Guardian pattern
    if len(palavras) < 3 or palavras[0] != 'From' : continue
    contagem = contagem + 1
    print(palavras[1])

print('Há {} linhas no arquivo onde From aparece como primeira palavra'.format(contagem))

# *********************************************************************************************************

# Exercise 6: Rewrite the program that prompts the user for a list of numbers and prints out the 
# maximum and minimum of the numbers at the end when the user enters “done”. Write the program to 
# store the numbers the user enters in a list and use the max() and min() functions to
# compute the maximum and minimum numbers after the loop completes.

lista_dados = list()

ciclo = True
while ciclo == True :
    numero = input('Por favor, insira um valor: ')
    if numero.lower() == 'done' :
        ciclo = False
        continue
    try :
        dado = float(numero)
    except :
        print('Por gentileza, insira um valor numérico.')
        continue
    lista_dados.append(dado)

print('Maximum:', max(lista_dados))
print('Minimum:', min(lista_dados))


