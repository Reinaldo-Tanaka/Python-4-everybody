# Exercise 1: Run the program on your system and see what numbers you get. Run the program more than 
# once and see what numbers you get.

import random

print(random.randint(1, 100))
print(random.randint(1, 100))
print(random.randint(1, 100))
print(random.randint(1, 100))
print(random.randint(1, 100))

# ***************************************************************************************************

# Exercise 2: Move the last line of this program to the top, so the function call appears before the 
# definitions. Run the program and see what error message you get.

repeat_lyrics()

def print_lyrics():
    print("I'm a lumberjack, and I'm okay.")
    print('I sleep all night and I work all day.')
def repeat_lyrics():
    print_lyrics()
    print_lyrics()

#Traceback (most recent call last):
#  File "teste.py", line 1, in <module>
#    repeat_lyrics()
#NameError: name 'repeat_lyrics' is not defined


# ***************************************************************************************************

# Exercise 3: Move the function call back to the bottom and move the definition of print_lyrics after 
# the definition of repeat_lyrics. What happens when you run this program?

def repeat_lyrics():
    print_lyrics()
    print_lyrics()

def print_lyrics():
    print("I'm a lumberjack, and I'm okay.")
    print('I sleep all night and I work all day.')

repeat_lyrics()

>>>I'm a lumberjack, and I'm okay.
>>>I sleep all night and I work all day.
>>>I'm a lumberjack, and I'm okay.
>>>I sleep all night and I work all day.

# It will be ok! Because there is no problem in the order of the functions.... the major problem 
# is the call!

# ***************************************************************************************************

# Exercise 4: What is the purpose of the “def” keyword in Python?
# a) It is slang that means “the following code is really cool”
# b) It indicates the start of a function
# c) It indicates that the following indented section of code is to be stored for later
# d) b and c are both true
# e) None of the above

# Letter (d)!

# ***************************************************************************************************

# Exercise 5: What will the following Python program print out?
def fred():
    print("Zap")
def jane():
    print("ABC")
jane()
fred()
jane()

# a) Zap ABC jane fred jane
# b) Zap ABC Zap
# c) ABC Zap jane
# d) ABC Zap ABC
# e) Zap Zap Zap

# Letter (d)!

# ***************************************************************************************************

# Exercise 6: Rewrite your pay computation with time-and-a-half for overtime and create a function 
# called computepay which takes two parameters (hours and rate).
# Enter Hours: 45   Enter Rate: 10      Pay: 475.0

def computepay (hours, rate):
    if hours < 40:
        gross_pay = hours * rate
    else:
        gross_pay = (40 * rate) + ((hours - 40) * (rate * 1.5))
    return gross_pay

print(computepay(45, 10))

# ***************************************************************************************************

# Exercise 7: Rewrite the grade program from the previous chapter using a function called computegrade 
# that takes a score as its parameter and returns a grade as a string.
#Score Grade
#>= 0.9 A
#>= 0.8 B
#>= 0.7 C
#>= 0.6 D
#< 0.6 F

def computegrade():

    try:
        score = float(input('Please, input the score: '))
    except:
        return 'Bad score!'
        quit()

    if score > 1 or score < 0:
        return 'Bad score!'
    elif score >= 0.9:
        return 'A'
    elif score >= 0.8:
        return 'B'
    elif score >= 0.7:
        return 'C'
    elif score >= 0.6:
        return 'D'
    elif score < 0.6:
        return 'F'

print(computegrade())
